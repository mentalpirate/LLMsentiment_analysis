import google.generativeai as genai
from markdown import markdown
from os import environ
import re, ast
import pandas as pd
import configparser 
import json
## Load configurations 
config = configparser.ConfigParser()

config.read('config.ini')

gemini_api_key = config.get("defaults","gemini_key")
llm_model = config.get("defaults","llm_model")

excel_file = 'customer_reviews.xlsx'  # Replace with your file path
json_file = 'output.json'    # Replace with your desired output file path

# Function to convert Excel file to JSON
def excel_to_json(excel_file):
    excel_file = "uploads/"+ excel_file
    # Read the Excel file
    df = pd.read_excel(excel_file)

    # Convert the dataframe to a dictionary
    data_dict = df.to_dict(orient='records')
    return data_dict

# Function to convert csv to json 
def csv_to_json(csv_file):
    csv_file = "uploads/"+ csv_file
    df = pd.read_csv(csv_file)
    df = df.to_json()
    result = json.loads(df)
    return result

# Convert markdown generated by llm to list
def markdown_to_txt(marktext):
    html_string =markdown(marktext)
    # Step 1: Remove HTML tags
    clean_string = re.sub(r'<.*?>', '', html_string)
    # Step 2: Extract JSON-like content (remove the leading 'json\n' part)
    json_like_string = clean_string.replace("json\n", "")
    # Step 3: Convert the string to a Python object (list of dicts)
    # Using ast.literal_eval to safely evaluate the list of dictionaries
    data = ast.literal_eval(json_like_string)
    # Step 4: Print or work with the data
    return data


def get_preds(prompt):
    genai.configure(api_key=gemini_api_key)

    # The API call to Google Generative AI
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(prompt)
    # Convert markdown to text
    response_list = markdown_to_txt(response.text)
    return response_list



def generate_analysis(input_file):
    if input_file.split(".")[1] == "xlsx":
        myjson = excel_to_json(input_file)
    elif input_file.split(".")[1] == "csv":
        myjson = csv_to_json(input_file)
    else:
        print("Invalid File extension")
    prompt = f"""
You are an expert linguist, who is good at classifying customer review sentiments into Positive/Negative labels.
Help me classify customer reviews into: Positive,Neutral and Negative with score in scale of 5.
Customer reviews are provided between three back ticks.
In your output, only return the Json code back as output - which is provided between three backticks.
Your task is to update predicted labels under 'pred_label' in the Json code.
Don't make any changes to Json code format, please.

```
{myjson}
```
"""
    myresponse = get_preds(prompt)
    
    return myresponse
