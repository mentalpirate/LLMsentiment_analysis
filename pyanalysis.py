import re, ast, csv
import pandas as pd
import google.generativeai as genai
from markdown import markdown

gemini_api_key = "AIzaSyCHa4QEdndsHJfHQRSms-9qmgHr16vnX38"
excel_file = 'customer_reviews.xlsx'  # Replace with your file path
json_file = 'output.json'    # Replace with your desired output file path


def csv_reader_func():
    with open('eggs.csv', newline='') as csvfile:
        mydict = {}
        spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
        for row in spamreader:
            print(row)

# Function to convert Excel file to JSON
def excel_to_json(excel_file):
    excel_file = "uploads/"+ excel_file
    # Read the Excel file
    df = pd.read_excel(excel_file)

    # Convert the dataframe to a dictionary
    data_dict = df.to_dict(orient='records')

    # Write the dictionary to a JSON file
    # with open(json_file, 'w') as f:
    #     json.dump(data_dict, f, indent=4)
    #print(f"Data from {excel_file} has been converted to {json_file}")
    return data_dict



# Convert markdown generated by llm to list
def markdown_to_txt(marktext):
    html_string =markdown(marktext)
    # Step 1: Remove HTML tags
    clean_string = re.sub(r'<.*?>', '', html_string)
    # Step 2: Extract JSON-like content (remove the leading 'json\n' part)
    json_like_string = clean_string.replace("json\n", "")
    # Step 3: Convert the string to a Python object (list of dicts)
    # Using ast.literal_eval to safely evaluate the list of dictionaries
    data = ast.literal_eval(json_like_string)
    # Step 4: Print or work with the data
    return data


def get_preds(prompt):
    genai.configure(api_key=gemini_api_key)

    # The API call to Google Generative AI
    model = genai.GenerativeModel("gemini-1.5-flash")

    
    response = model.generate_content(prompt)

    # Convert markdown to text
    response_list = markdown_to_txt(response.text)
    return response_list



def generate_analysis(input_file):
    myjson = excel_to_json(input_file)

    prompt = f"""
You are an expert linguist, who is good at classifying customer review sentiments into Positive/Negative labels.
Help me classify customer reviews into: Positive,Neutral and Negative with score in scale of 5.
Customer reviews are provided between three back ticks.
In your output, only return the Json code back as output - which is provided between three backticks.
Your task is to update predicted labels under 'pred_label' in the Json code.
Don't make any changes to Json code format, please.

```
{myjson}
```
"""
    myresponse = get_preds(prompt)
    
    return myresponse
